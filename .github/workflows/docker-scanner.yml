name: Docker Scanner CI/CD

on:
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Ensure Docker Daemon is Running
        run: |
          echo "🔹 Checking Docker status..."
          sudo systemctl start docker
          sleep 5
          docker info || (echo "🚨 ERROR: Docker is not running!" && exit 1)

      - name: 🔍 Extract Latest Image Name
        id: extract_image
        run: |
          echo "🔹 Checking available Docker images..."
          docker images

          if [ -z "$(docker images -q)" ]; then
            echo "🚨 No Docker images found! Pulling a test image..."
            docker pull alpine:latest  
          fi

          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)

          if [ -z "$IMAGE_NAME" ]; then
            echo "🚨 ERROR: No valid Docker image found even after pulling!"
            exit 1
          fi

          echo "✅ Extracted image name: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: 🔍 Ensure `scan_reports` Directory Exists
        run: |
          mkdir -p scan_reports
          echo "✅ Created scan_reports directory if missing."

      - name: 🔍 Scan with Trivy
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "🔹 Running Trivy scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image "$IMAGE" > "scan_reports/trivy-${IMAGE//[:\/]/_}.txt" || echo "⚠ Trivy scan failed!"
          echo "✅ Trivy report saved: scan_reports/trivy-${IMAGE//[:\/]/_}.txt"

      - name: 🔍 Scan with Grype
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "🔹 Running Grype scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype "$IMAGE" > "scan_reports/grype-${IMAGE//[:\/]/_}.txt" || echo "⚠ Grype scan failed!"
          echo "✅ Grype report saved: scan_reports/grype-${IMAGE//[:\/]/_}.txt"

      - name: 🔍 Ensure Scan Reports Exist
        run: |
          if ls scan_reports/trivy-*.txt 1> /dev/null 2>&1 && ls scan_reports/grype-*.txt 1> /dev/null 2>&1; then
            echo "✅ Scan reports found!"
          else
            echo "❌ ERROR: Scan reports are missing!"
            ls -lah scan_reports/
            exit 1
          fi

      - name: 📤 Upload Scan Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/*.txt

  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports

      - name: 🛠 Install MySQL Client and Connector
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: 🔍 Debug MySQL Connection
        run: |
          echo "🔹 Checking MySQL Connection..."
          mysql -h 192.168.1.5 -u flask_user -pAbhiram@1729 -e "SELECT 1;" || echo "❌ MySQL query failed!"

      - name: 🗄 Insert Scan Reports into MySQL
        run: |
          echo "🔹 Logging into MySQL and inserting data..."

          mysql -h 192.168.1.5 -u flask_user -pAbhiram@1729 <<EOF
          CREATE DATABASE IF NOT EXISTS docker_management;
          USE docker_management;

          CREATE TABLE IF NOT EXISTS scan_results (
              id INT AUTO_INCREMENT PRIMARY KEY,
              image_name VARCHAR(255),
              scanner VARCHAR(50),
              report TEXT,
              scan_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          LOAD DATA LOCAL INFILE 'scan_reports/trivy-${{ env.IMAGE_NAME // [:\/]/_ }}.txt'
          INTO TABLE scan_results
          FIELDS TERMINATED BY '\n'
          (report)
          SET image_name='${{ env.IMAGE_NAME }}', scanner='Trivy';

          LOAD DATA LOCAL INFILE 'scan_reports/grype-${{ env.IMAGE_NAME // [:\/]/_ }}.txt'
          INTO TABLE scan_results
          FIELDS TERMINATED BY '\n'
          (report)
          SET image_name='${{ env.IMAGE_NAME }}', scanner='Grype';

          EOF
          
          echo "✅ Scan reports inserted successfully into MySQL!"
