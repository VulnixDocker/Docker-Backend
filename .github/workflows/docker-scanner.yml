name: Docker Scanner CI/CD

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: "Docker image to scan"
        required: true

jobs:
  scan:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v3

      - name: üõ† Verify Docker Image Input
        run: |
          if [[ -z "${{ github.event.inputs.docker_image }}" ]]; then
            echo "üö® ERROR: No Docker image specified!"
            exit 1
          else
            echo "‚úÖ Docker image to scan: ${{ github.event.inputs.docker_image }}"
          fi
        shell: bash

      - name: üê≥ Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: üîç Scan with Trivy
        run: |
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          docker pull "$IMAGE_NAME"
          docker run --rm aquasec/trivy image "$IMAGE_NAME" > trivy-report.txt
        shell: bash

      - name: üîç Scan with Grype
        run: |
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          docker run --rm anchore/grype "$IMAGE_NAME" > grype-report.txt
        shell: bash

      - name: üì§ Upload Scan Reports
        uses: actions/upload-artifact@v3
        with:
          name: Scanner Reports
          path: |
            trivy-report.txt
            grype-report.txt

  store-in-db:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    needs: scan

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: docker_management
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: Abhiram@1729
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --host=localhost --user=flask_user --password=Abhiram@1729"

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v3

      - name: üì• Download Scan Reports
        uses: actions/download-artifact@v3
        with:
          name: Scanner Reports

      - name: Install MySQL Connector
        run: |
          python -m pip install --upgrade pip
          pip install mysql-connector-python
        shell: bash

      - name: üõ† Set Environment Variables
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> $GITHUB_ENV
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> $GITHUB_ENV
        shell: bash

      - name: üóÑ Wait for MySQL to be Ready
        run: |
          for i in {1..30}; do
            mysql -h 127.0.0.1 -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 1" && break
            echo "‚è≥ Waiting for MySQL..."
            sleep 5
          done
        shell: bash

      - name: üîç Verify Scan Reports Exist
        run: |
          if [ ! -f "trivy-report.txt" ] || [ ! -f "grype-report.txt" ]; then
            echo "‚ùå ERROR: Scan reports are missing!"
            exit 1
          else
            echo "‚úÖ Scan reports found!"
          fi
        shell: bash

      - name: üóÑ Store Scan Data in MySQL
        run: python insert_scan_report.py
        shell: bash

      - name: üîé Verify Data in MySQL
        run: |
          mysql -h 127.0.0.1 -u $MYSQL_USER -p$MYSQL_PASSWORD -D $MYSQL_DATABASE -e "SELECT * FROM scan_reports;"
        shell: bash
