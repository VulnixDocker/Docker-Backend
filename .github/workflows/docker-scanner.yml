name: Docker Scanner CI/CD

on:
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Ensure Docker Daemon is Running
        run: |
          echo "🔹 Checking Docker status..."
          sudo systemctl start docker
          sleep 5
          docker info || (echo "🚨 ERROR: Docker is not running!" && exit 1)

      - name: 🐳 Load Uploaded Docker Images (If Any)
        run: |
          for FILE in uploaded_images/*.tar; do
            if [ -f "$FILE" ]; then
              echo "✅ Found uploaded Docker image: $FILE"
              docker load -i "$FILE"
            fi
          done

      - name: 🐳 List All Docker Images
        id: find_images
        run: |
          IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v '<none>')
          if [ -z "$IMAGES" ]; then
            echo "🚨 ERROR: No Docker images found!"
            exit 1
          fi
          echo "✅ Found Docker images:"
          echo "$IMAGES"
          echo "IMAGES<<EOF" >> $GITHUB_ENV
          echo "$IMAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 🔍 Scan All Images with Trivy & Grype
        run: |
          mkdir -p scan_reports  # ✅ FIX: Ensure directory exists
          echo "$IMAGES" | while read -r IMAGE; do
            if [ -n "$IMAGE" ]; then
              echo "🔹 Scanning image: $IMAGE"

              # Ensure Trivy & Grype have access to Docker socket
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image "$IMAGE" > "scan_reports/trivy-${IMAGE//[:\/]/_}.txt" || echo "⚠️ Trivy scan failed!"
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype "$IMAGE" > "scan_reports/grype-${IMAGE//[:\/]/_}.txt" || echo "⚠️ Grype scan failed!"
            fi
          done

      - name: 🔍 Ensure Scan Reports Exist
        run: |
          if [ -z "$(ls -A scan_reports/ 2>/dev/null)" ]; then
            echo "❌ ERROR: Scan reports are missing!"
            exit 1
          else
            echo "✅ Scan reports generated successfully."
          fi

      - name: 📤 Upload Scan Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/

  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: docker_management
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: Abhiram@1729
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=flask_user --password=Abhiram@1729"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports

      - name: 🔍 Verify Scan Reports Exist
        run: |
          echo "🔹 Checking for scan reports..."
          ls -lah scan_reports/ || echo "⚠️ WARNING: scan_reports directory is missing!"
          
          # Check if Trivy and Grype reports exist
          TRIVY_REPORT=$(ls scan_reports/trivy-*.txt 2>/dev/null || echo "")
          GRYPE_REPORT=$(ls scan_reports/grype-*.txt 2>/dev/null || echo "")

          if [ -z "$TRIVY_REPORT" ] && [ -z "$GRYPE_REPORT" ]; then
            echo "❌ ERROR: No scan reports found!"
            exit 1
          else
            echo "✅ Scan reports found! Proceeding with database insertion..."
          fi


      - name: 🛠 Install MySQL Connector
        run: |
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: 🗄 Wait for MySQL to Be Ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "SELECT 1"; then
              echo "✅ MySQL is ready!"
              break
            fi
            echo "⏳ Waiting for MySQL..."
            sleep 2
          done

      - name: 🗄 Store Scan Data in MySQL
        run: python insert_scan_report.py
