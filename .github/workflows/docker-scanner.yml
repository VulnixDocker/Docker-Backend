name: Docker Scanner CI/CD

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: "Docker image to scan"
        required: true

jobs:
  scan:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v3

      - name: üõ† Verify Docker Image Input
        shell: bash
        run: |
          if [[ -z "${{ github.event.inputs.docker_image }}" ]]; then
            echo "üö® ERROR: No Docker image specified!"
            exit 1
          else
            echo "‚úÖ Docker image to scan: ${{ github.event.inputs.docker_image }}"
          fi

      - name: üê≥ Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: üîç Scan with Trivy (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          docker pull "$IMAGE_NAME"
          docker run --rm aquasec/trivy image "$IMAGE_NAME" > trivy-report.txt

      - name: üîç Scan with Trivy (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          docker pull $IMAGE_NAME
          docker run --rm aquasec/trivy image $IMAGE_NAME | Out-File -Encoding utf8 trivy-report.txt

      - name: üîç Scan with Grype (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          docker run --rm anchore/grype "$IMAGE_NAME" > grype-report.txt

      - name: üîç Scan with Grype (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          docker run --rm anchore/grype $IMAGE_NAME | Out-File -Encoding utf8 grype-report.txt

      - name: üì§ Upload Scan Reports
        uses: actions/upload-artifact@v3
        with:
          name: Scanner Reports
          path: |
            trivy-report.txt
            grype-report.txt

  store-in-db:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    needs: scan
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=${{ secrets.MYSQL_USER }} --password=${{ secrets.MYSQL_PASSWORD }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v3

      - name: üì• Download Scan Reports
        uses: actions/download-artifact@v3
        with:
          name: Scanner Reports

      - name: Install MySQL Connector (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          python3 -m pip install --upgrade pip
          pip3 install mysql-connector-python

      - name: Install MySQL Connector (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: üóÑ Wait for MySQL to be Ready (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          for i in {1..30}; do
            mysql -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "SELECT 1" && break
            echo "‚è≥ Waiting for MySQL..."
            sleep 5
          done

      - name: üóÑ Wait for MySQL to be Ready (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          for ($i=0; $i -lt 30; $i++) {
            try {
              mysql -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "SELECT 1"
              break
            } catch {
              Write-Host "‚è≥ Waiting for MySQL..."
              Start-Sleep -Seconds 5
            }
          }

      - name: üîç Verify Scan Reports Exist (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          if [ ! -f "trivy-report.txt" ] || [ ! -f "grype-report.txt" ]; then
            echo "‚ùå ERROR: Scan reports are missing!"
            exit 1
          else
            echo "‚úÖ Scan reports found!"
          fi

      - name: üîç Verify Scan Reports Exist (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (!(Test-Path "trivy-report.txt") -or !(Test-Path "grype-report.txt")) {
            Write-Host "‚ùå ERROR: Scan reports are missing!"
            exit 1
          } else {
            Write-Host "‚úÖ Scan reports found!"
          }

      - name: üóÑ Store Scan Data in MySQL (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: python3 insert_scan_report.py

      - name: üóÑ Store Scan Data in MySQL (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: python insert_scan_report.py

      - name: üîé Verify Data in MySQL (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mysql -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -D ${{ secrets.MYSQL_DATABASE }} -e "SELECT * FROM scan_reports;"

      - name: üîé Verify Data in MySQL (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mysql -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -D ${{ secrets.MYSQL_DATABASE }} -e "SELECT * FROM scan_reports;"
