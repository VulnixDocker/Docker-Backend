name: Docker Scanner CI/CD

on:
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Ensure Docker Daemon is Running
        run: |
          echo "🔹 Checking Docker status..."
          sudo systemctl start docker
          sleep 5
          docker info || (echo "🚨 ERROR: Docker is not running!" && exit 1)

      - name: 🔍 Extract Latest Image Name
        id: extract_image
        run: |
          echo "🔹 Checking available Docker images..."
          docker images

          if [ -z "$(docker images -q)" ]; then
            echo "🚨 No Docker images found! Pulling a test image..."
            docker pull alpine:latest  
          fi

          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)

          if [ -z "$IMAGE_NAME" ]; then
            echo "🚨 ERROR: No valid Docker image found even after pulling!"
            exit 1
          fi

          echo "✅ Extracted image name: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: 🔍 Ensure `scan_reports` Directory Exists
        run: |
          mkdir -p scan_reports
          echo "✅ Created scan_reports directory if missing."

      - name: 🔍 Scan with Trivy
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          SAFE_IMAGE_NAME=$(echo "$IMAGE" | sed 's/[\/:]/_/g')
          echo "🔹 Running Trivy scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image "$IMAGE" > "scan_reports/trivy-$SAFE_IMAGE_NAME.txt" || echo "⚠ Trivy scan failed!"
          echo "✅ Trivy report saved: scan_reports/trivy-$SAFE_IMAGE_NAME.txt"

      - name: 🔍 Scan with Grype
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          SAFE_IMAGE_NAME=$(echo "$IMAGE" | sed 's/[\/:]/_/g')
          echo "🔹 Running Grype scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype "$IMAGE" > "scan_reports/grype-$SAFE_IMAGE_NAME.txt" || echo "⚠ Grype scan failed!"
          echo "✅ Grype report saved: scan_reports/grype-$SAFE_IMAGE_NAME.txt"

      - name: 🔍 Ensure Scan Reports Exist
        run: |
          if ls scan_reports/trivy-*.txt 1> /dev/null 2>&1 && ls scan_reports/grype-*.txt 1> /dev/null 2>&1; then
            echo "✅ Scan reports found!"
          else
            echo "❌ ERROR: Scan reports are missing!"
            ls -lah scan_reports/
            exit 1
          fi

      - name: 📤 Upload Scan Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/*.txt

  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports

      - name: 🔍 Verify Scan Reports Exist
        run: |
          echo "🔹 Checking for scan reports..."
          ls -lah scan_reports/ || echo "⚠ WARNING: scan_reports directory is missing!"

      - name: 🛠 Install MySQL Client and Skeema
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          curl -LO https://github.com/skeema/skeema/releases/latest/download/skeema_linux_amd64.tar.gz
          tar -xzf skeema_linux_amd64.tar.gz
          sudo mv skeema /usr/local/bin/
          skeema --version
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: 🔍 Debug MySQL Connection
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          echo "🔹 Checking MySQL Connection..."
          mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "SELECT 1;" || echo "❌ MySQL query failed!"

      - name: 🗄 Wait for MySQL to Be Ready
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          for i in {1..30}; do
            if mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "SELECT 1;" > /dev/null 2>&1; then
              echo "✅ MySQL is ready!"
              break
            fi
            echo "⏳ Waiting for MySQL..."
            sleep 2
          done

      - name: 🛠 Run Database Migrations with Skeema
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          skeema init
          echo "[mydb]" >> .skeema
          echo "host=\"$MYSQL_HOST\"" >> .skeema
          echo "user=\"$MYSQL_USER\"" >> .skeema
          echo "password=\"$MYSQL_PASSWORD\"" >> .skeema
          echo "schema=docker_management" >> .skeema
          skeema diff
          skeema push

      - name: 🗄 Store Scan Data in Local MySQL
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: "docker_management"
        run: |
          mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" "$MYSQL_DATABASE" -e "
          CREATE TABLE IF NOT EXISTS scan_reports (
            id INT AUTO_INCREMENT PRIMARY KEY,
            scanner_name VARCHAR(255) NOT NULL,
            file_name VARCHAR(255) NOT NULL,
            report_text LONGTEXT NOT NULL,
            scanned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );"

          for FILE in scan_reports/*.txt; do
            SCANNER=$(echo $FILE | grep -oP 'trivy|grype')
            REPORT_TEXT=$(head -c 10000 "$FILE")
            FILE_NAME=$(basename "$FILE")

            mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" "$MYSQL_DATABASE" -e "
            INSERT INTO scan_reports (scanner_name, file_name, report_text) 
            VALUES ('$SCANNER', '$FILE_NAME', '$REPORT_TEXT');"
          done

          echo "✅ Scan reports successfully stored in MySQL!"
