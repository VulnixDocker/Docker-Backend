name: Docker Scanner CI/CD

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: "Docker image to scan"
        required: true

jobs:
  scan:
    runs-on: windows-latest  # ‚úÖ Only Windows
    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v3

      - name: üõ† Verify Docker Image Input
        shell: pwsh
        run: |
          if ([string]::IsNullOrEmpty("${{ github.event.inputs.docker_image }}")) {
            Write-Host "üö® ERROR: No Docker image specified!"
            exit 1
          } else {
            Write-Host "‚úÖ Docker image to scan: ${{ github.event.inputs.docker_image }}"
          }

      - name: üê≥ Set up Docker (Windows Compatible)
        shell: pwsh
        run: |
          $env:DOCKER_BUILDKIT=0
          Write-Host "üöÄ BuildKit Disabled! Using default Docker builder."
      
      - name: üõ† Install Trivy (Using Docker)
        shell: bash
        run: |
          echo "üîπ Pulling Trivy Docker image..."
          docker pull aquasec/trivy
          echo "‚úÖ Trivy Installed Successfully!"

      - name: üîç Scan with Trivy (Using Docker)
        shell: bash
        run: |
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          echo "üîπ Scanning image: $IMAGE_NAME"
          docker run --rm aquasec/trivy image "$IMAGE_NAME" > trivy-report.txt
          echo "‚úÖ Trivy Scan Completed!"

      - name: üîç Scan with Grype
        shell: pwsh
        run: |
          $IMAGE_NAME = "${{ github.event.inputs.docker_image }}"
          docker run --rm anchore/grype $IMAGE_NAME | Out-File -FilePath grype-report.txt

      - name: üì§ Upload Scan Reports
        uses: actions/upload-artifact@v3
        with:
          name: Scanner Reports
          path: |
            trivy-report.txt
            grype-report.txt

  store-in-db:
    runs-on: windows-latest  # ‚úÖ Only Windows
    needs: scan

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: docker_management
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: Abhiram@1729
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --host=localhost --user=flask_user --password=Abhiram@1729"

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v3

      - name: üì• Download Scan Reports
        uses: actions/download-artifact@v3
        with:
          name: Scanner Reports

      - name: Install MySQL Connector
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: üõ† Set Environment Variables
        shell: pwsh
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: üóÑ Wait for MySQL to be Ready
        shell: pwsh
        run: |
          for ($i=1; $i -le 30; $i++) {
            mysql -h 127.0.0.1 -u $env:MYSQL_USER -p$env:MYSQL_PASSWORD -e "SELECT 1" && break
            Write-Host "‚è≥ Waiting for MySQL..."
            Start-Sleep -Seconds 5
          }

      - name: üîç Verify Scan Reports Exist
        shell: pwsh
        run: |
          if (!(Test-Path "trivy-report.txt") -or !(Test-Path "grype-report.txt")) {
            Write-Host "‚ùå ERROR: Scan reports are missing!"
            exit 1
          } else {
            Write-Host "‚úÖ Scan reports found!"
          }

      - name: üóÑ Store Scan Data in MySQL
        shell: pwsh
        run: python insert_scan_report.py

      - name: üîé Verify Data in MySQL
        shell: pwsh
        run: |
          mysql -h 127.0.0.1 -u $env:MYSQL_USER -p$env:MYSQL_PASSWORD -D $env:MYSQL_DATABASE -e "SELECT * FROM scan_reports;"
