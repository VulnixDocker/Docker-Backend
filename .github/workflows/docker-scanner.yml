name: Docker Scanner CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      docker_image:
        description: "Docker Image to Scan"
        required: true
        type: string


jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v4

      - name: üê≥ Ensure Docker Daemon is Running
        run: |
          echo "üîπ Checking Docker status..."
          sudo systemctl start docker || echo "üö® Docker already running!"
          docker info || (echo "üö® ERROR: Docker is not running!" && exit 1)

      - name: üîë Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: üîç Extract Image Name from Input
        id: extract_image
        run: |
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          if [ -z "$IMAGE_NAME" ]; then
            echo "üö® ERROR: No Docker image provided!"
            exit 1
          fi
          echo "‚úÖ Extracted Image Name: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: üîç Verify Docker Image Exists
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          docker images | grep "$IMAGE" || echo "üö® ERROR: Image not found!"

     - name: üèóÔ∏è Load Docker Image from Upload
        run: |
          UPLOADED_FILE=$(ls uploaded_images/*.tar 2>/dev/null | head -n 1)
          
          if [ -z "$UPLOADED_FILE" ]; then
            echo "üö® ERROR: No Docker image tar file found!"
            exit 1
          fi
          
          echo "‚úÖ Found uploaded Docker image: $UPLOADED_FILE"
          docker load -i "$UPLOADED_FILE"

          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
          if [ -z "$IMAGE_NAME" ]; then
            echo "üö® ERROR: Failed to load image!"
            exit 1
          fi

          echo "‚úÖ Loaded Docker Image: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV


      - name: üîç Scan with Trivy
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          mkdir -p scan_reports
          echo "üîπ Running Trivy scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image "$IMAGE" > "scan_reports/trivy-${IMAGE//[:\/]/_}.txt"

      - name: üîç Scan with Grype
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "üîπ Running Grype scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype "$IMAGE" > "scan_reports/grype-${IMAGE//[:\/]/_}.txt"

      - name: üì§ Upload Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/*.txt

  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: docker_management
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: Abhiram@1729
        ports:
          - 3306:3306

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports

      - name: üîç Verify Scan Reports Exist
        run: |
          echo "üîπ Checking for scan reports in scan_reports directory..."
          TRIVY_REPORT=$(ls scan_reports/trivy-*.txt 2>/dev/null || echo "")

          if [ -z "$TRIVY_REPORT" ]; then
            echo "‚ùå ERROR: No scan reports found!"
            exit 1
          else
            echo "‚úÖ Scan reports found: $TRIVY_REPORT"
          fi

      - name: üõ† Install MySQL Connector
        run: |
          sudo apt update
          sudo apt install -y mysql-client python3-pip
          pip install mysql-connector-python

      - name: üóÑ Wait for MySQL to Be Ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "SELECT 1"; then
              echo "‚úÖ MySQL is ready!"
              break
            fi
            echo "‚è≥ Waiting for MySQL..."
            sleep 2
          done

      - name: üóÑ Store Scan Data in MySQL
        run: |
          mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 docker_management -e "
          CREATE TABLE IF NOT EXISTS scan_reports (
              id INT AUTO_INCREMENT PRIMARY KEY,
              scanner_name VARCHAR(50),
              file_name VARCHAR(255),
              report_text TEXT,
              scanned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          LOAD DATA LOCAL INFILE 'scan_reports/trivy-${{ env.IMAGE_NAME }}.txt'
          INTO TABLE scan_reports
          FIELDS TERMINATED BY '\n'
          LINES TERMINATED BY '\n'
          (@report_text) SET scanner_name='Trivy', file_name='trivy-${{ env.IMAGE_NAME }}.txt', report_text=@report_text;
          "

      - name: ‚úÖ Confirm Data is Stored in MySQL
        run: |
          mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 docker_management -e "SELECT * FROM scan_reports;"
