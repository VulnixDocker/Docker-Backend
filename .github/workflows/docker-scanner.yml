name: Docker Scanner CI/CD

on:
  workflow_dispatch:  # ✅ Allows triggering via GitHub API & Flask
    inputs:
      docker_image:
        description: "Docker image to scan"
        required: false
        default: "latest"

jobs:
  scan:  # ✅ Fix indentation
    runs-on: ubuntu-latest

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Ensure Docker Daemon is Running
        run: |
          echo "🔹 Checking Docker status..."
          sudo systemctl start docker
          sleep 5
          docker info || (echo "🚨 ERROR: Docker is not running!" && exit 1)

      - name: 📤 Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Uploaded-Docker-Image
          path: uploaded_images/*.tar

      - name: 🔍 Verify Docker Image Exists
        run: |
          echo "🔹 Checking if Docker image exists..."
          docker images
          if ! docker image inspect ${{ github.event.inputs.docker_image }} > /dev/null 2>&1; then
            echo "🚨 ERROR: Docker image '${{ github.event.inputs.docker_image }}' does not exist!"
            exit 1
          fi
          echo "✅ Docker image found: ${{ github.event.inputs.docker_image }}"

      - name: 🔍 Ensure `scan_reports` Directory Exists
        run: |
          mkdir -p scan_reports
          echo "✅ Created scan_reports directory if missing."

      - name: 🔍 Scan with Trivy
        run: |
          IMAGE="${{ github.event.inputs.docker_image }}"
          echo "🔹 Running Trivy scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image "$IMAGE" > "scan_reports/trivy-${IMAGE//[:\/]/_}.txt"
          echo "✅ Trivy scan completed!"

      - name: 🔍 Scan with Grype
        run: |
          IMAGE="${{ github.event.inputs.docker_image }}"
          echo "🔹 Running Grype scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype "$IMAGE" > "scan_reports/grype-${IMAGE//[:\/]/_}.txt"
          echo "✅ Grype scan completed!"

      - name: 🔍 Ensure Scan Reports Exist
        run: |
          if [ ! -f "scan_reports/trivy-${{ github.event.inputs.docker_image }}.txt" ] || [ ! -f "scan_reports/grype-${{ github.event.inputs.docker_image }}.txt" ]; then
            echo "❌ ERROR: Scan reports are missing!"
            exit 1
          fi
          echo "✅ Scan reports found."

      - name: 📤 Upload Scan Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/*.txt

  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: docker_management
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: Abhiram@1729
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=flask_user --password=Abhiram@1729"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports

      - name: 🔍 Verify Scan Reports Exist
        run: |
          echo "🔹 Checking for scan reports in current directory..."
          ls scan_reports/
          if [ ! -f "scan_reports/trivy-${{ github.event.inputs.docker_image }}.txt" ] || [ ! -f "scan_reports/grype-${{ github.event.inputs.docker_image }}.txt" ]; then
            echo "❌ ERROR: Scan reports are missing!"
            exit 1
          fi
          echo "✅ Scan reports found."

      - name: 🛠 Install MySQL Connector
        run: |
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: 🗄 Wait for MySQL to Be Ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "SELECT 1"; then
              echo "✅ MySQL is ready!"
              break
            fi
            echo "⏳ Waiting for MySQL..."
            sleep 2
          done

      - name: 🗄 Debug MySQL Connection Before Insertion
        run: |
          mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "SHOW DATABASES;"
          mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "USE docker_management; SHOW TABLES;"

      - name: 🗄 Insert Scan Data into MySQL
        run: |
          export MYSQL_PWD="Abhiram@1729"
          mysql -h 127.0.0.1 -u flask_user docker_management <<EOF
          INSERT INTO scan_reports (user_id, scanner_name, file_name, report_text)
          VALUES 
          (1, 'Trivy', 'trivy-${{ github.event.inputs.docker_image }}.txt', LOAD_FILE('scan_reports/trivy-${{ github.event.inputs.docker_image }}.txt')),
          (1, 'Grype', 'grype-${{ github.event.inputs.docker_image }}.txt', LOAD_FILE('scan_reports/grype-${{ github.event.inputs.docker_image }}.txt'));
          EOF
          echo "✅ Scan reports successfully inserted into MySQL!"
