name: Docker Scanner CI/CD

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: "Docker image to scan"
        required: true
        default: "latest"

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Ensure Docker Daemon is Running
        run: |
          echo "🔹 Checking Docker status..."
          sudo systemctl start docker
          sleep 5
          docker info || (echo "🚨 ERROR: Docker is not running!" && exit 1)

      - name: 🐳 Load Uploaded Docker Image
        run: |
          echo "🔹 Listing uploaded Docker images..."
          ls -lah uploaded_images/ || echo "⚠ No uploaded images found!"

          UPLOADED_FILE=$(ls uploaded_images/*.tar 2>/dev/null | head -n 1)
          if [ -z "$UPLOADED_FILE" ]; then
            echo "🚨 ERROR: No Docker image tar file found!"
            exit 1
          fi
          echo "✅ Found uploaded Docker image: $UPLOADED_FILE"
          docker load -i "$UPLOADED_FILE"
          docker images

      - name: 🔍 Extract Latest Image Name
        id: extract_image
        run: |
          echo "🔹 Available Docker Images:"
          docker images
          
          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v '<none>' | head -n 1)
          if [ -z "$IMAGE_NAME" ]; then
            echo "🚨 ERROR: No valid Docker image found!"
            exit 1
          fi
          echo "✅ Extracted image name: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: 🔍 Ensure scan_reports Directory Exists
        run: |
          mkdir -p scan_reports
          echo "✅ Created scan_reports directory if missing."

      - name: 🔍 Scan with Trivy
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "🔹 Running Trivy scan on $IMAGE..."
          
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --scanners vuln "$IMAGE" > "scan_reports/trivy-${IMAGE//[:\/]/_}.txt"
          
          if [ ! -s "scan_reports/trivy-${IMAGE//[:\/]/_}.txt" ]; then
            echo "❌ ERROR: Trivy scan failed or produced an empty report!"
            exit 1
          fi
          echo "✅ Trivy report saved: scan_reports/trivy-${IMAGE//[:\/]/_}.txt"

      - name: 🔍 Scan with Grype
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "🔹 Running Grype scan on $IMAGE..."
          
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype "$IMAGE" > "scan_reports/grype-${IMAGE//[:\/]/_}.txt"
          
          if [ ! -s "scan_reports/grype-${IMAGE//[:\/]/_}.txt" ]; then
            echo "❌ ERROR: Grype scan failed or produced an empty report!"
            exit 1
          fi
          echo "✅ Grype report saved: scan_reports/grype-${IMAGE//[:\/]/_}.txt"

      - name: 🔍 Ensure Scan Reports Exist
        run: |
          if ls scan_reports/trivy-*.txt 1> /dev/null 2>&1 && ls scan_reports/grype-*.txt 1> /dev/null 2>&1; then
            echo "✅ Scan reports found!"
          else
            echo "❌ ERROR: Scan reports are missing!"
            exit 1
          fi

      - name: 📤 Upload Scan Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/*.txt

  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: docker_management
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: Abhiram@1729
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=flask_user --password=Abhiram@1729"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports

      - name: 🔍 Verify Scan Reports Exist
        run: |
          echo "🔹 Checking for scan reports in current directory..."
          
          TRIVY_REPORT=$(ls scan_reports/trivy-*.txt 2>/dev/null || echo "")
          GRYPE_REPORT=$(ls scan_reports/grype-*.txt 2>/dev/null || echo "")

          if [ -z "$TRIVY_REPORT" ] && [ -z "$GRYPE_REPORT" ]; then
            echo "❌ ERROR: No scan reports found!"
            exit 1
          else
            echo "✅ Scan reports found: $TRIVY_REPORT $GRYPE_REPORT"
            echo "Proceeding with database insertion..."
          fi

      - name: 🛠 Install MySQL Connector
        run: |
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: 🗄 Wait for MySQL to Be Ready
        run: |
          for i in {1..30}; do
            mysqladmin ping -h 127.0.0.1 --silent && echo "✅ MySQL is ready!" && exit 0
            echo "⏳ Waiting for MySQL..."
            sleep 2
          done

      - name: 🗄 Store Scan Data in MySQL
        run: python insert_scan_report.py
