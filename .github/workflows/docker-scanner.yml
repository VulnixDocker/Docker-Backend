name: Docker Scanner CI/CD

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: "Docker image to scan"
        required: true
        default: "vulnerables/web-dvwa"

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🛠 Verify Docker Image Input
        run: |
          if [[ -z "${{ github.event.inputs.docker_image }}" ]]; then
            echo "🚨 ERROR: No Docker image specified!"
            exit 1
          else
            echo "✅ Docker image to scan: ${{ github.event.inputs.docker_image }}"
          fi

      - name: 🐳 Start Docker Daemon
        run: |
          sudo systemctl start docker
          sleep 5  # Wait for Docker to start
          docker info

      - name: 🔑 Authenticate with Docker Hub (If Required)
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          if [ -n "$DOCKER_USERNAME" ] && [ -n "$DOCKER_PASSWORD" ]; then
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            echo "✅ Successfully authenticated with Docker Hub!"
          else
            echo "⚠️ Skipping authentication, no credentials provided."
          fi

      - name: 🐳 Check if Image Exists
        run: |
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          if ! docker image inspect "$IMAGE_NAME" > /dev/null 2>&1; then
            echo "🚨 ERROR: Docker image '$IMAGE_NAME' not found locally!"
            exit 1
          fi

      - name: 🔍 Scan with Trivy
        run: |
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          docker run --rm aquasec/trivy image "$IMAGE_NAME" > trivy-report.txt || echo "⚠️ Trivy scan failed!"

      - name: 🔍 Scan with Grype
        run: |
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          docker run --rm anchore/grype "$IMAGE_NAME" > grype-report.txt || echo "⚠️ Grype scan failed!"

      - name: 📤 Upload Scan Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: |
            trivy-report.txt
            grype-report.txt

  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: docker_management
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: Abhiram@1729
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=flask_user --password=Abhiram@1729"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v3

      - name: 📥 Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports

      - name: 🔍 Verify Scan Reports Exist
        run: |
          ls -lah
          if [ ! -f "trivy-report.txt" ] || [ ! -f "grype-report.txt" ]; then
            echo "❌ ERROR: Scan reports are missing!"
            exit 1
          else
            echo "✅ Scan reports found!"
          fi

      - name: 🛠 Install MySQL Connector
        run: |
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: 🗄 Wait for MySQL to Be Ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "SELECT 1"; then
              echo "✅ MySQL is ready!"
              break
            fi
            echo "⏳ Waiting for MySQL..."
            sleep 2
          done

      - name: 🗄 Store Scan Data in MySQL
        run: python insert_scan_report.py
