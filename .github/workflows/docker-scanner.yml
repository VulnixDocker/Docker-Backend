name: Docker Scanner CI/CD

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: "Docker image to scan"
        required: true
        type: string

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Ensure Docker Daemon is Running
        run: |
          echo "🔹 Checking Docker status..."
          sudo systemctl start docker
          sleep 5
          docker info || (echo "🚨 ERROR: Docker is not running!" && exit 1)

      - name: 🔍 Load the Latest Uploaded Docker Image
        run: |
          echo "🔹 Loading the latest uploaded image..."
          IMAGE_NAME="${{ github.event.inputs.docker_image }}"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

          # Check if the image exists before scanning
          docker images "$IMAGE_NAME" || { echo "🚨 ERROR: Image not found!"; exit 1; }
          echo "✅ Using Image: $IMAGE_NAME"

      - name: 🔍 Ensure `scan_reports` Directory Exists
        run: |
          mkdir -p scan_reports
          echo "✅ Created scan_reports directory."

      - name: 🔍 Scan with Trivy
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "🔹 Running Trivy scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image "$IMAGE" > "scan_reports/trivy-${IMAGE//[:\/]/_}.txt"
          echo "✅ Trivy scan completed!"

      - name: 🔍 Scan with Grype
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "🔹 Running Grype scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype "$IMAGE" > "scan_reports/grype-${IMAGE//[:\/]/_}.txt"
          echo "✅ Grype scan completed!"

      - name: 🔍 Ensure Scan Reports Exist
        run: |
          if ls scan_reports/trivy-*.txt 1> /dev/null 2>&1 && ls scan_reports/grype-*.txt 1> /dev/null 2>&1; then
            echo "✅ Scan reports found!"
          else
            echo "❌ ERROR: Scan reports are missing!"
            ls -lah scan_reports/
            exit 1
          fi

      - name: 📤 Upload Scan Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/*.txt


  migrate-and-store:
    runs-on: ubuntu-latest
    needs: scan

    steps:
      - name: 🔥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports

      - name: 🔍 Verify Scan Reports Exist
        run: |
          echo "🔹 Checking for scan reports..."
          ls -lah scan_reports/ || echo "⚠ WARNING: scan_reports directory is missing!"

      - name: 🛠 Install MySQL Client and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          python -m pip install --upgrade pip
          pip install mysql-connector-python
          
      - name: 🗄 Insert Scan Data into MySQL
        run: |
          export MYSQL_PWD="${{ secrets.DB_PASSWORD }}"

          # Fetch user_id associated with the scanned image
          USER_ID=$(mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} -D docker_management -N -e "SELECT id FROM users WHERE username='admin' LIMIT 1;")

          if [ -z "$USER_ID" ]; then
            echo "🚨 ERROR: Could not fetch user_id! Check database!"
            exit 1
          fi

          mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} docker_management <<EOF
          INSERT INTO scan_reports (user_id, scanner_name, file_name, report_text)
          VALUES 
          ('$USER_ID', 'Trivy', 'trivy-${{ env.IMAGE_NAME }}.txt', LOAD_FILE('scan_reports/trivy-${{ env.IMAGE_NAME }}.txt')),
          ('$USER_ID', 'Grype', 'grype-${{ env.IMAGE_NAME }}.txt', LOAD_FILE('scan_reports/grype-${{ env.IMAGE_NAME }}.txt'));
          EOF
          echo "✅ Scan reports successfully inserted into MySQL!"
