name: Docker Scanner CI/CD

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: "Docker Image to Scan"
        required: true
        type: string

jobs:
  upload-image:
    runs-on: ubuntu-latest

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v4

      - name: üèóÔ∏è Ensure Uploaded Images Directory Exists
        run: |
          echo "üîπ Checking for uploaded images..."
          mkdir -p uploaded_images
          cd uploaded_images/

      - name: üì• Debug - Show File Path & Permissions
        run: |
          echo "üîç Checking uploaded images..."
          ls -lah uploaded_images/
          ls -lahs uploaded_image
          echo "‚úÖ File structure verified."

      - name: üì§ Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: uploaded-docker-image
          path: uploaded_images/
          if-no-files-found: error

      - name: üîç Debug - List Available Artifacts
        run: |
          echo "üîπ Listing artifacts in workflow run..."
          gh run list --repo ${{ github.repository }}

  scan:
    runs-on: ubuntu-latest
    needs: upload-image  # Ensure image is uploaded first

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download Uploaded Docker Image
        uses: actions/download-artifact@v4
        with:
          name: uploaded-docker-image
          path: uploaded_images/

      - name: üèóÔ∏è Ensure Uploaded Images Directory Exists
        run: |
          echo "üîπ Checking for uploaded images..."
          mkdir -p uploaded_images
          ls -lah uploaded_images/

      - name: üèóÔ∏è Load Docker Image from Upload
        run: |
          UPLOADED_FILE=$(ls uploaded_images/*.tar 2>/dev/null | head -n 1)

          if [ -z "$UPLOADED_FILE" ]; then
            echo "üö® ERROR: No Docker image tar file found!"
            echo "üìÇ Available files in uploaded_images/:"
            ls -lah uploaded_images/
            exit 1
          fi

          echo "‚úÖ Found uploaded Docker image: $UPLOADED_FILE"
          docker load -i "$UPLOADED_FILE"

          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
          if [ -z "$IMAGE_NAME" ]; then
            echo "üö® ERROR: Failed to load image!"
            exit 1
          fi

          echo "‚úÖ Loaded Docker Image: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: üîç Scan with Trivy
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          mkdir -p scan_reports
          echo "üîπ Running Trivy scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image "$IMAGE" > "scan_reports/trivy-${IMAGE//[:\/]/_}.txt"

      - name: üì§ Upload Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/*.txt

  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: docker_management
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: Abhiram@1729
        ports:
          - 3306:3306

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports

      - name: üîç Verify Scan Reports Exist
        run: |
          echo "üîπ Checking for scan reports in scan_reports directory..."
          if ! ls scan_reports/trivy-*.txt 1> /dev/null 2>&1; then
            echo "‚ùå ERROR: No scan reports found!"
            exit 1
          fi
          echo "‚úÖ Scan reports exist."

      - name: üõ† Install MySQL Connector
        run: |
          sudo apt update
          sudo apt install -y mysql-client python3-pip
          pip install mysql-connector-python

      - name: üóÑ Wait for MySQL to Be Ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "SELECT 1"; then
              echo "‚úÖ MySQL is ready!"
              break
            fi
            echo "‚è≥ Waiting for MySQL..."
            sleep 2
          done

      - name: üóÑ Store Scan Data in MySQL
        run: |
          mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 docker_management -e "
          CREATE TABLE IF NOT EXISTS scan_reports (
              id INT AUTO_INCREMENT PRIMARY KEY,
              scanner_name VARCHAR(50),
              file_name VARCHAR(255),
              report_text TEXT,
              scanned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          LOAD DATA LOCAL INFILE 'scan_reports/trivy-${{ env.IMAGE_NAME }}.txt'
          INTO TABLE scan_reports
          FIELDS TERMINATED BY '\n'
          LINES TERMINATED BY '\n'
          (@report_text) SET scanner_name='Trivy', file_name='trivy-${{ env.IMAGE_NAME }}.txt', report_text=@report_text;
          "

      - name: ‚úÖ Confirm Data is Stored in MySQL
        run: |
          mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 docker_management -e "SELECT * FROM scan_reports;"
