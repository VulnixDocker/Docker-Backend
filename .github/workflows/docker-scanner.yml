name: Docker Scanner CI/CD

on:
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v4

      - name: üê≥ Ensure Docker Daemon is Running
        run: |
          echo "üîπ Checking Docker status..."
          sudo systemctl start docker
          sleep 5
          docker info || (echo "üö® ERROR: Docker is not running!" && exit 1)

      - name: üê≥ Load Uploaded Docker Image
        run: |
          UPLOADED_FILE=$(ls uploaded_images/*.tar | head -n 1)
          if [ -z "$UPLOADED_FILE" ]; then
            echo "üö® ERROR: No Docker image tar file found!"
            exit 1
          fi
          echo "‚úÖ Found uploaded Docker image: $UPLOADED_FILE"
          docker load -i "$UPLOADED_FILE"

      - name: üîç Extract Latest Image Name
        id: extract_image
        run: |
          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)
          if [ -z "$IMAGE_NAME" ]; then
            echo "üö® ERROR: No valid Docker image found!"
            exit 1
          fi
          echo "‚úÖ Extracted image name: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: üîç Ensure scan_reports Directory Exists
        run: |
          mkdir -p scan_reports
          echo "‚úÖ Created scan_reports directory if missing."

      - name: üîç Scan with Trivy
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "üîπ Running Trivy scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --scanners vuln "$IMAGE" > "scan_reports/trivy-${IMAGE//[:\/]/_}.txt" || echo "‚ö† Trivy scan failed!"
          echo "‚úÖ Trivy report saved: scan_reports/trivy-${IMAGE//[:\/]/_}.txt"

      - name: üîç Scan with Grype
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "üîπ Running Grype scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype "$IMAGE" > "scan_reports/grype-${IMAGE//[:\/]/_}.txt" || echo "‚ö† Grype scan failed!"
          echo "‚úÖ Grype report saved: scan_reports/grype-${IMAGE//[:\/]/_}.txt"

      - name: üîç Ensure Scan Reports Exist
        run: |
          if ls scan_reports/trivy-*.txt 1> /dev/null 2>&1 && ls scan_reports/grype-*.txt 1> /dev/null 2>&1; then
            echo "‚úÖ Scan reports found!"
          else
            echo "‚ùå ERROR: Scan reports are missing!"
            exit 1
          fi

      - name: üì§ Upload Scan Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/*.txt


  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: docker_management
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: Abhiram@1729
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=flask_user --password=Abhiram@1729"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports

      - name: üîç Verify Scan Reports Exist
        run: |
          echo "üîπ Checking for scan reports in current directory..."
          TRIVY_REPORT=$(ls scan_reports/trivy-*.txt 2>/dev/null || echo "")
          GRYPE_REPORT=$(ls scan_reports/grype-*.txt 2>/dev/null || echo "")
          if [ -z "$TRIVY_REPORT" ] && [ -z "$GRYPE_REPORT" ]; then
            echo "‚ùå ERROR: No scan reports found!"
            exit 1
          else
            echo "‚úÖ Scan reports found: $TRIVY_REPORT $GRYPE_REPORT"
            echo "Proceeding with database insertion..."
          fi

      - name: üõ† Install MySQL Connector
        run: |
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: üóÑ Wait for MySQL to Be Ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "SELECT 1"; then
              echo "‚úÖ MySQL is ready!"
              break
            fi
            echo "‚è≥ Waiting for MySQL..."
            sleep 2
          done

      - name: üóÑ Debug MySQL Connection Before Insertion
        run: |
          mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "SHOW DATABASES;"
          mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 -e "USE docker_management; SHOW TABLES;"

      - name: üóÑ Insert Scan Data into MySQL
        run: |
          mysql -h 127.0.0.1 -u flask_user -pAbhiram@1729 docker_management <<EOF
          INSERT INTO scan_reports (user_id, scanner_name, file_name, report_text)
          VALUES 
          (1, 'Trivy', 'trivy-${{ env.IMAGE_NAME }}.txt', LOAD_FILE('scan_reports/trivy-${{ env.IMAGE_NAME }}.txt')),
          (1, 'Grype', 'grype-${{ env.IMAGE_NAME }}.txt', LOAD_FILE('scan_reports/grype-${{ env.IMAGE_NAME }}.txt'));
          EOF
          echo "‚úÖ Scan reports successfully inserted into MySQL!"
