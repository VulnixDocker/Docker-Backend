name: Docker Scanner CI/CD

on:
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v4

      - name: üê≥ Ensure Docker Daemon is Running
        run: |
          echo "üîπ Checking Docker status..."
          sudo systemctl start docker
          sleep 5
          docker info || (echo "üö® ERROR: Docker is not running!" && exit 1)

      - name: üîç Extract Latest Image Name
        id: extract_image
        run: |
          echo "üîπ Checking available Docker images..."
          docker images

          # Ensure at least one image exists
          if [ -z "$(docker images -q)" ]; then
            echo "üö® No Docker images found! Pulling a test image..."
            docker pull alpine:latest  # You can replace this with your actual image
          fi

          # Extract image name
          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n 1)

          if [ -z "$IMAGE_NAME" ]; then
            echo "üö® ERROR: No valid Docker image found even after pulling!"
            exit 1
          fi

          echo "‚úÖ Extracted image name: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: üîç Ensure `scan_reports` Directory Exists
        run: |
          mkdir -p scan_reports
          echo "‚úÖ Created scan_reports directory if missing."

      - name: üîç Scan with Trivy
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "üîπ Running Trivy scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image "$IMAGE" > "scan_reports/trivy-${IMAGE//[:\/]/_}.txt" || echo "‚ö† Trivy scan failed!"
          echo "‚úÖ Trivy report saved: scan_reports/trivy-${IMAGE//[:\/]/_}.txt"

      - name: üîç Scan with Grype
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          echo "üîπ Running Grype scan on $IMAGE..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype "$IMAGE" > "scan_reports/grype-${IMAGE//[:\/]/_}.txt" || echo "‚ö† Grype scan failed!"
          echo "‚úÖ Grype report saved: scan_reports/grype-${IMAGE//[:\/]/_}.txt"

      - name: üîç Ensure Scan Reports Exist
        run: |
          if ls scan_reports/trivy-*.txt 1> /dev/null 2>&1 && ls scan_reports/grype-*.txt 1> /dev/null 2>&1; then
            echo "‚úÖ Scan reports found!"
          else
            echo "‚ùå ERROR: Scan reports are missing!"
            ls -lah scan_reports/
            exit 1
          fi

      - name: üì§ Upload Scan Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports/*.txt

  store-in-db:
    runs-on: ubuntu-latest
    needs: scan

    steps:
      - name: üî• Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: Scanner Reports
          path: scan_reports

      - name: üîç Verify Scan Reports Exist
        run: |
          echo "üîπ Checking for scan reports..."
          ls -lah scan_reports/ || echo "‚ö† WARNING: scan_reports directory is missing!"

      - name: üõ† Install MySQL Client and Connector
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: üîç Debug MySQL Connection
        run: |
          echo "üîπ Checking MySQL Connection..."
          nc -zv 192.168.1.5 3306 || echo "‚ùå MySQL is not reachable on port 3306!"
          mysql -h 192.168.1.5 -u flask_user -pAbhiram@1729 -e "SELECT 1;" || echo "‚ùå MySQL query failed!"

      - name: üóÑ Wait for MySQL to Be Ready
        run: |
          export MYSQL_PWD="Abhiram@1729"
          for i in {1..30}; do
            if mysql -h 192.168.1.5 -u flask_user -e "SELECT 1;" > /dev/null 2>&1; then
              echo "‚úÖ MySQL is ready!"
              break
            fi
            echo "‚è≥ Waiting for MySQL..."
            sleep 2
          done

      - name: üóÑ Store Scan Data in Local MySQL
        run: python insert_scan_report.py
        env:
          MYSQL_HOST: "192.168.1.5"
          MYSQL_USER: "flask_user"
          MYSQL_PASSWORD: "Abhiram@1729"
          MYSQL_DATABASE: "docker_management"
